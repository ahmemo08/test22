import boto3
import time
from datetime import datetime, timedelta
def lambda_handler(event, context):
    asg_name = event['detail']['AutoScalingGroupName']
    SSC = 'SSC'
    BAT = 'BAT'
    Service = 'Service'
    Reports = 'Reports'
    if asg_name == "staging-xg5-searchcore2":
        Alarm_asg = SSC
    if asg_name == "staging-xg5-batch2":
        Alarm_asg = BAT
    if asg_name == "staging-xg5-service":
        Alarm_asg = Service
    if asg_name == "staging-xg5-reports":
        Alarm_asg = Reports
    cloudwatch = boto3.client('cloudwatch')
    if event['detail-type'] == "EC2 Instance Terminate Successful":
        alarm_list = []
        next_token = ''
        while next_token is not None:
            response = cloudwatch.describe_alarms(NextToken=next_token) if next_token else cloudwatch.describe_alarms()
            alarm_list += response['MetricAlarms']
            next_token = response.get('NextToken')
        alarms_to_delete = [alarm['AlarmName'] for alarm in alarm_list if alarm['AlarmName'].startswith(f'XG5 STAG {Alarm_asg}')]
        if alarms_to_delete:
            cloudwatch.delete_alarms(AlarmNames=alarms_to_delete)
            print(f"Alarms deleted XG5 STAG {Alarm_asg}")
        else:
            print(f"No alarms found starting with XG5 STAG {Alarm_asg}")

    asg_name = event['detail']['AutoScalingGroupName']
    SSC = 'SSC'
    BAT = 'BAT'
    Service = 'Service'
    Reports = 'Reports'
    if asg_name == "staging-xg5-searchcore2":
        Alarm_asg = SSC
    if asg_name == "staging-xg5-batch2":
        Alarm_asg = BAT
    if asg_name == "staging-xg5-service":
        Alarm_asg = Service
    if asg_name == "staging-xg5-reports":
        Alarm_asg = Reports
    cloudwatch = boto3.client('cloudwatch') 
    time.sleep(120)    #120 sec wait
    print(f"Alarms creating XG5 STAG {Alarm_asg}")
    ec2 = boto3.client('ec2')
    instance_id = event['detail']['EC2InstanceId']
    response = ec2.describe_instances(InstanceIds=[instance_id])
    ami_id = response['Reservations'][0]['Instances'][0]['ImageId']
    instance_type = response['Reservations'][0]['Instances'][0]['InstanceType']
    autoscaling = boto3.client('autoscaling')
    response = autoscaling.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])
    instances = response['AutoScalingGroups'][0]['Instances']
    counter = 0
    for instance in instances:
        instance_id = instance['InstanceId']
        counter += 1
        if asg_name != "staging-xg5-batch2":
            cloudwatch.put_metric_alarm(
                AlarmName=f'XG5 STAG {Alarm_asg}0{counter} Server - CPU',
                ComparisonOperator='GreaterThanThreshold',
                EvaluationPeriods=1,
                MetricName='CPUUtilization',
                Namespace='AWS/EC2',
                Period=300,
                Statistic='Average',
                Threshold=95.0,
                ActionsEnabled=True,
                OKActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
                AlarmActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
                Dimensions=[
                    {
                        'Name': 'InstanceId',
                        'Value': instance_id
                    }
                ]
            )
        cloudwatch.put_metric_alarm(
            AlarmName=f'XG5 STAG {Alarm_asg}0{counter} Server - Memory',
            ActionsEnabled= True,
            OKActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
            AlarmActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
            InsufficientDataActions= [],
            MetricName= "Memory % Committed Bytes In Use",
            Namespace= "CWAgent",
            Statistic= "Average",
            Period = 300,
            EvaluationPeriods = 3,
            DatapointsToAlarm = 3,
            Threshold = 80,
            ComparisonOperator = "GreaterThanOrEqualToThreshold",
            TreatMissingData = "missing",

            Dimensions=[
                {
                    'Name': 'InstanceId',
                    'Value': instance_id
                },
                {
                    "Name": 'AutoScalingGroupName',
                    "Value": asg_name
                },
                {
                    "Name": 'objectname',
                    "Value": 'Memory'
                },
                {
                    "Name": 'ImageId',
                    "Value": ami_id
                },
                {
                    "Name": 'InstanceType',
                    "Value": instance_type
            }
            ],
        )

        cloudwatch.put_metric_alarm(
            AlarmName=f'XG5 STAG {Alarm_asg}0{counter} Server - C Drive',
            OKActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
            AlarmActions= ["arn:aws:sns:eu-west-1:485575125510:TASUK"],
            ActionsEnabled=True,
            InsufficientDataActions= [],
            MetricName= "LogicalDisk % Free Space",
            Namespace= "CWAgent",
            Statistic= "Average",
            Period= 300,
            EvaluationPeriods= 1,
            DatapointsToAlarm= 1,
            Threshold= 25,
            ComparisonOperator= "LessThanOrEqualToThreshold",
            TreatMissingData= "missing",
            Dimensions=[
                {
                    'Name': 'InstanceId',
                    'Value': instance_id
                },
                {
                    "Name": 'AutoScalingGroupName',
                    "Value": asg_name
                },
                {
                    "Name": 'objectname',
                    "Value": 'C Drive'
                },
                {
                    "Name": 'ImageId',
                    "Value": ami_id
                },
                {
                    "Name": 'InstanceType',
                    "Value": instance_type
                }
            ],
        )
